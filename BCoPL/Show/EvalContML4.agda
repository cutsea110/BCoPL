module BCoPL.Show.EvalContML4 where

open import Data.String
open import Data.Nat.Show renaming (show to show‚Ñï)
open import Data.Integer renaming (show to show‚Ñ§)
open import Data.Bool.Show renaming (show to showùîπ)
open import BCoPL.EvalContML4

showDerivation‚áì : ‚àÄ {Œµ e k v} ‚Üí Œµ ‚ä¢ e ‚â´ k ‚áì v ‚Üí String
showDerivation‚áí : ‚àÄ {v‚ÇÅ k v‚ÇÇ} ‚Üí v‚ÇÅ ‚áí k ‚áì v‚ÇÇ ‚Üí String
showEnv : Env ‚Üí String
showExp : Exp ‚Üí String
showValue : Value ‚Üí String
showCont : Cont ‚Üí String

private
  showBinding : BindedValue ‚Üí String
  showBinding (x , v) = x ++ " = " ++ showValue v

  showEnv ‚óè = ""
  showEnv (‚óè ‚ä± x) = showBinding x
  showEnv (Œµ ‚ä± x) = showEnv Œµ ++ "," ++ showBinding x

showExp (i n) = show‚Ñ§ n
showExp (b v) = showùîπ v
showExp (var x) = x
showExp (op prim‚äï e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " + " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äù e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " - " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äõ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " * " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚â∫ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " < " ++ showExp e‚ÇÇ ++ ")"
showExp (if e‚ÇÅ then e‚ÇÇ else e‚ÇÉ) = "if " ++ showExp e‚ÇÅ ++ " then " ++ showExp e‚ÇÇ ++ " else " ++ showExp e‚ÇÉ
showExp (‚Ñìet x ‚âî e‚ÇÅ Œπn e‚ÇÇ)
  = "let " ++ x ++ " = " ++ showExp e‚ÇÅ ++ " in " ++ showExp e‚ÇÇ
showExp (‚Ñìetrec f ‚âîfun x ‚áí e‚ÇÅ Œπn e‚ÇÇ)
  = "let rec " ++ f ++ " = fun " ++ x ++ " -> " ++ showExp e‚ÇÅ ++ " in " ++ showExp e‚ÇÇ
showExp (fun x ‚áí e) = "(fun " ++ x ++ " -> " ++ showExp e ++ ")"
showExp (app e‚ÇÅ e‚ÇÇ) = showExp e‚ÇÅ ++ "(" ++ showExp e‚ÇÇ ++ ")"
showExp [] = "[]"
showExp (x ‚à∑ y) = "(" ++ showExp x ++ " :: " ++ showExp y ++ ")"
showExp (match e‚ÇÅ with[]‚áí e‚ÇÇ ‚à£ x ‚à∑ y ‚áí e‚ÇÉ)
  = "match " ++ showExp e‚ÇÅ ++ " with [] -> " ++ showExp e‚ÇÇ ++ " | " ++ x ++ " :: " ++ y ++ " -> " ++ showExp e‚ÇÉ
showExp (letcc x Œπn e)
  = "letcc " ++ x ++ " in " ++ showExp e

showValue error = "*** Error occured by illegal Value ***"
showValue (i n) = show‚Ñ§ n
showValue (b v) = showùîπ v
showValue (‚ü® Œµ ‚ü©[fun x ‚áí e ])
  = "(" ++ showEnv Œµ ++ ")[fun " ++ x ++ " -> " ++ showExp e ++ "]"
showValue (‚ü® Œµ ‚ü©[rec f ‚âîfun x ‚áí e‚ÇÅ ])
  = "(" ++ showEnv Œµ ++ ")[rec " ++ f ++ " = fun " ++ x ++ " -> " ++ showExp e‚ÇÅ ++ "]"
showValue [] = "[]"
showValue (x ‚à∑ y) = "(" ++ showValue x ++ " :: " ++ showValue y ++ ")"
showValue (‚ü™ k ‚ü´) = "[" ++ showCont k ++ "]"

showDerivationPlus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ plus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationPlus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " plus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Plus {};"
showDerivationMinus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ minus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationMinus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " minus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Minus {};"
showDerivationTimes : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ times i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationTimes {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " times " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Times {};"
showDerivationLessThan : ‚àÄ {i‚ÇÅ i‚ÇÇ b} ‚Üí i‚ÇÅ less-than i‚ÇÇ is b ‚Üí String
showDerivationLessThan {i‚ÇÅ} {i‚ÇÇ} {v} p
  = showValue i‚ÇÅ ++ " less than " ++ showValue i‚ÇÇ ++ " is " ++ showValue v ++ " by B-Lt {};"

showPrim : Prim ‚Üí String
showPrim prim‚äï = " + "
showPrim prim‚äù = " - "
showPrim prim‚äõ = " * "
showPrim prim‚â∫ = " < "

showSection : Section ‚Üí String
showSection (Œµ ‚ä¢ ‚äó <$ e) = showEnv Œµ ++ " |- _ " ++ showPrim ‚äó ++ " " ++ showExp e
showSection (v $> ‚äó) = " " ++ showValue v ++ showPrim ‚äó ++ " _"
showSection (Œµ ‚ä¢if‚ãÜthen e‚ÇÅ else e‚ÇÇ) = showEnv Œµ ++ " |- if _ then " ++ showExp e‚ÇÅ ++ " else " ++ showExp e‚ÇÇ
showSection (Œµ ‚ä¢let x ‚âî‚ãÜin e) = showEnv Œµ ++ " |- let " ++ x ++ " = _ in " ++ showExp e
showSection (Œµ ‚ä¢app‚ãÜ e) = showEnv Œµ ++ " |- _ " ++ showExp e
showSection (v ‚ãÜppa) = showValue v ++ " _"
showSection (Œµ ‚ä¢‚ãÜ‚à∑ y) = showEnv Œµ ++ " |- _ :: " ++ showExp y
showSection (x ‚à∑‚ãÜ) = " " ++ showValue x ++ " :: _"
showSection (Œµ ‚ä¢match‚ãÜwith[]‚áí e‚ÇÅ ‚à£ x ‚à∑ y ‚áí e‚ÇÇ) = showEnv Œµ ++ " |- match _ with [] -> " ++ showExp e‚ÇÅ ++ " | " ++ x ++ "::" ++ y ++ " -> " ++ showExp e‚ÇÇ

showCont ‚ãÜ = "_"
showCont (‚ü¶ sop ‚üß‚â´ cont) = "{" ++ showSection sop ++ "} >> " ++ showCont cont

showJudge‚áí : ‚àÄ {v‚ÇÅ k v‚ÇÇ} ‚Üí v‚ÇÅ ‚áí k ‚áì v‚ÇÇ ‚Üí String
showJudge‚áí C-Ret = "C-Ret {};"
showJudge‚áí (C-EvalR d) = "C-EvalR {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-Plus p d) = "C-Plus {" ++ showDerivationPlus p ++ showDerivation‚áí d ++ "};"
showJudge‚áí (C-Minus p d) = "C-Minus {" ++ showDerivationMinus p ++ showDerivation‚áí d ++ "};"
showJudge‚áí (C-Times p d) = "C-Times {" ++ showDerivationTimes p ++ showDerivation‚áí d ++ "};"
showJudge‚áí (C-Lt p d) = "C-Lt {" ++ showDerivationLessThan p ++ showDerivation‚áí d ++ "};"
showJudge‚áí (C-IfT d) = "C-IfT {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-IfF d) = "C-IfF {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-LetBody d) = "C-LetBody {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-EvalArg d) = "C-EvalArg {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-EvalFun d) = "C-EvalFun {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-EvalFunR d) = "C-EvalFunR {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-EvalConsR d) = "C-EvalConsR {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-Cons d) = "C-Cons {" ++ showDerivation‚áí d ++ "};"
showJudge‚áí (C-MatchNil d) = "C-MatchNil {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-MatchCons d) = "C-MatchCons {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-EvalFunC d) = "C-EvalFunC {" ++ showDerivation‚áí d ++ "};"

showJudge‚áì : ‚àÄ {Œµ e k v} ‚Üí Œµ ‚ä¢ e ‚â´ k ‚áì v ‚Üí String
showJudge‚áì (E-Int p) = "E-Int {" ++ showDerivation‚áí p ++ "};"
showJudge‚áì (E-Bool p) = "E-Bool {" ++ showDerivation‚áí p ++ "};"
showJudge‚áì (E-BinOp p) = "E-BinOp {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-If p) = "E-If {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-Var x p) = "E-Var {" ++ showDerivation‚áí p ++ "};"
showJudge‚áì (E-Let p) = "E-Let {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-Fun p) = "E-Fun {" ++ showDerivation‚áí p ++ "};"
showJudge‚áì (E-App p) = "E-App {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-LetRec p) = "E-LetRec {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-Nil p) = "E-Nil {" ++ showDerivation‚áí p ++ "};"
showJudge‚áì (E-Cons p) = "E-Cons {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-Match p) = "E-Match {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-LetCc p) = "E-LetCc {" ++ showDerivation‚áì p ++ "};"

showDerivation‚áí {v‚ÇÅ} {k} {v‚ÇÇ} p = showValue v‚ÇÅ ++ " => " ++ showCont k ++ " evalto " ++ showValue v‚ÇÇ ++ " by " ++ showJudge‚áí p
showDerivation‚áì {Œµ} {e} {k} {v} p = showEnv Œµ ++ " |- " ++ showExp e ++ " >> " ++ showCont k ++ " evalto " ++ showValue v ++ " by " ++ showJudge‚áì p
