module BCoPL.Show.While where

open import Data.String
open import Data.Nat.Show renaming (show to show‚Ñï)
open import Data.Integer renaming (show to show‚Ñ§)
open import Data.Bool.Show renaming (show to showùîπ)
open import BCoPL.While

showDerivationChangesTo : ‚àÄ {c œÉ‚ÇÅ œÉ‚ÇÇ} ‚Üí c changes œÉ‚ÇÅ to œÉ‚ÇÇ ‚Üí String
showDerivation‚áì : ‚àÄ {œÉ a‚ÇÅ i‚ÇÅ} ‚Üí œÉ ‚ä¢ a‚ÇÅ ‚áì i‚ÇÅ ‚Üí String
showDerivation‚Üì : ‚àÄ {œÉ b‚ÇÅ bv‚ÇÅ} ‚Üí œÉ ‚ä¢ b‚ÇÅ ‚Üì bv‚ÇÅ ‚Üí String
showAExp : AExp ‚Üí String
showBExp : BExp ‚Üí String

showAExp (i n) = show‚Ñ§ n
showAExp (var v) = v
showAExp (aop prim‚äï a‚ÇÅ a‚ÇÇ) = "(" ++ showAExp a‚ÇÅ ++ " + " ++ showAExp a‚ÇÇ ++ ")"
showAExp (aop prim‚äù a‚ÇÅ a‚ÇÇ) = "(" ++ showAExp a‚ÇÅ ++ " - " ++ showAExp a‚ÇÇ ++ ")"
showAExp (aop prim‚äõ a‚ÇÅ a‚ÇÇ) = "(" ++ showAExp a‚ÇÅ ++ " * " ++ showAExp a‚ÇÇ ++ ")"

showBExp (b v) = showùîπ v
showBExp (! b‚ÇÅ) = "(!" ++ showBExp b‚ÇÅ ++ ")"
showBExp (lop prim&& b‚ÇÅ b‚ÇÇ) = "(" ++ showBExp b‚ÇÅ ++ " && " ++ showBExp b‚ÇÇ ++ ")"
showBExp (lop prim|| b‚ÇÅ b‚ÇÇ) = "(" ++ showBExp b‚ÇÅ ++ " || " ++ showBExp b‚ÇÇ ++ ")"
showBExp (comp prim‚â∫ a‚ÇÅ a‚ÇÇ) = "(" ++ showAExp a‚ÇÅ ++ " < " ++ showAExp a‚ÇÇ ++ ")"
showBExp (comp prim‚âà a‚ÇÅ a‚ÇÇ) = "(" ++ showAExp a‚ÇÅ ++ " == " ++ showAExp a‚ÇÇ ++ ")"
showBExp (comp prim‚âº a‚ÇÅ a‚ÇÇ) = "(" ++ showAExp a‚ÇÅ ++ " <= " ++ showAExp a‚ÇÇ ++ ")"

showIValue : IValue ‚Üí String
showIValue error = "*** Error occured! ***"
showIValue (i n) = show‚Ñ§ n

showBValue : BValue ‚Üí String
showBValue (b v) = showùîπ v

showCom : Com ‚Üí String
showCom skip = "skip"
showCom (x ‚âî a) = x ++ ":=" ++ showAExp a
showCom (c‚ÇÅ >> c‚ÇÇ) = showCom c‚ÇÅ ++ ";" ++ showCom c‚ÇÇ
showCom (if b‚ÇÅ then c‚ÇÅ else c‚ÇÇ) = "if " ++ showBExp b‚ÇÅ ++ " then " ++ showCom c‚ÇÅ ++ " else " ++ showCom c‚ÇÇ
showCom (while b‚ÇÅ do c) = "while (" ++ showBExp b‚ÇÅ ++ ") do " ++ showCom c

showBinding : BindedValue ‚Üí String
showBinding (x , v) = x ++ " = " ++ showIValue v

showStore : Store ‚Üí String
showStore ‚óè = ""
showStore (‚óè ‚ä± x) = showBinding x
showStore (œÉ ‚ä± x) = showStore œÉ ++ "," ++ showBinding x

showDerivationPlus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ plus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationPlus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showIValue i‚ÇÅ ++ " plus " ++ showIValue i‚ÇÇ ++ " is " ++ showIValue i‚ÇÉ ++ " by B-Plus {};"
showDerivationMinus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ minus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationMinus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showIValue i‚ÇÅ ++ " minus " ++ showIValue i‚ÇÇ ++ " is " ++ showIValue i‚ÇÉ ++ " by B-Minus {};"
showDerivationTimes : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ times i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationTimes {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showIValue i‚ÇÅ ++ " times " ++ showIValue i‚ÇÇ ++ " is " ++ showIValue i‚ÇÉ ++ " by B-Times {};"
showDerivationLessThan : ‚àÄ {i‚ÇÅ i‚ÇÇ b} ‚Üí i‚ÇÅ less-than i‚ÇÇ is b ‚Üí String
showDerivationLessThan {i‚ÇÅ} {i‚ÇÇ} {v} p
  = showIValue i‚ÇÅ ++ " less than " ++ showIValue i‚ÇÇ ++ " is " ++ showBValue v ++ " by B-Lt {};"

showJudge‚áì : ‚àÄ {œÉ a‚ÇÅ i‚ÇÅ} ‚Üí œÉ ‚ä¢ a‚ÇÅ ‚áì i‚ÇÅ ‚Üí String
showJudge‚Üì : ‚àÄ {œÉ b‚ÇÅ bv‚ÇÅ} ‚Üí œÉ ‚ä¢ b‚ÇÅ ‚Üì bv‚ÇÅ ‚Üí String


showJudge‚áì A-Const = "A-Const {};"
showJudge‚áì (A-Var p) = "A-Var {};"
showJudge‚áì (A-Plus p‚ÇÅ p‚ÇÇ prf) = "A-Plus {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ "};"
showJudge‚áì (A-Minus p‚ÇÅ p‚ÇÇ prf) = "A-Minus {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ "};"
showJudge‚áì (A-Times p‚ÇÅ p‚ÇÇ prf) = "A-Times {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ "};"

showJudge‚Üì B-Const = "B-Const {};"
showJudge‚Üì (B-Not p prf) = "B-Not {" ++ showDerivation‚Üì p ++ "};"
showJudge‚Üì (B-And p‚ÇÅ p‚ÇÇ prf) = "B-And {" ++ showDerivation‚Üì p‚ÇÅ ++ showDerivation‚Üì p‚ÇÇ ++ "};"
showJudge‚Üì (B-Or p‚ÇÅ p‚ÇÇ prf) = "B-Or {" ++ showDerivation‚Üì p‚ÇÅ ++ showDerivation‚Üì p‚ÇÇ ++ "};"
showJudge‚Üì (B-Lt p‚ÇÅ p‚ÇÇ prf) = "B-Lt {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ "};"
showJudge‚Üì (B-Eq p‚ÇÅ p‚ÇÇ prf) = "B-Eq {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ "};"
showJudge‚Üì (B-Le p‚ÇÅ p‚ÇÇ prf) = "B-Le {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ "};"

showJudgeChangesTo : ‚àÄ {c œÉ‚ÇÅ œÉ‚ÇÇ} ‚Üí c changes œÉ‚ÇÅ to œÉ‚ÇÇ ‚Üí String
showJudgeChangesTo C-Skip = "C-Skip {};"
showJudgeChangesTo (C-Assign d p)
  = "C-Assign {" ++ showDerivation‚áì d ++ "};"
showJudgeChangesTo (C-Seq d‚ÇÅ d‚ÇÇ)
  = "C-Seq {" ++ showDerivationChangesTo d‚ÇÅ ++ showDerivationChangesTo d‚ÇÇ ++ "};"
showJudgeChangesTo (C-IfT p d)
  = "C-IfT {" ++ showDerivation‚Üì p ++ showDerivationChangesTo d ++ "};"
showJudgeChangesTo (C-IfF p d)
  = "C-IfF {" ++ showDerivation‚Üì p ++ showDerivationChangesTo d ++ "};"
showJudgeChangesTo (C-WhileT p d‚ÇÅ d‚ÇÇ)
  = "C-WhileT {" ++ showDerivation‚Üì p ++ showDerivationChangesTo d‚ÇÅ ++ showDerivationChangesTo d‚ÇÇ ++ "};"
showJudgeChangesTo (C-WhileF p)
  = "C-WhileF {" ++ showDerivation‚Üì p ++ "};"

showDerivation‚áì {œÉ} {a‚ÇÅ} {i‚ÇÅ} p = showStore œÉ ++ " |- " ++ showAExp a‚ÇÅ ++ " evalto " ++ showIValue i‚ÇÅ ++ " by " ++ showJudge‚áì p

showDerivation‚Üì {œÉ} {b‚ÇÅ} {bv‚ÇÅ} p = showStore œÉ ++ " |- " ++ showBExp b‚ÇÅ ++ " evalto " ++ showBValue bv‚ÇÅ ++ " by " ++ showJudge‚Üì p

showDerivationChangesTo {c} {œÉ‚ÇÅ} {œÉ‚ÇÇ} p = showCom c ++ " changes " ++ showStore œÉ‚ÇÅ ++ " to " ++ showStore œÉ‚ÇÇ ++ " by " ++ showJudgeChangesTo p

