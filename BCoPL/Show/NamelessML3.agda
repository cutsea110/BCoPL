module BCoPL.Show.NamelessML3 where

open import Data.String
open import Data.Nat.Show renaming (show to show‚Ñï)
open import Data.Integer renaming (show to show‚Ñ§)
open import Data.Bool.Show renaming (show to showùîπ)
open import BCoPL.NamelessML3

showDerivation‚üæ : ‚àÄ {Œµ e d} ‚Üí Œµ ‚ä¢ e ‚üæ d ‚Üí String
showVarList : VarList ‚Üí String
showExp : Exp ‚Üí String
showDBExp : DBExp ‚Üí String

showVarList ‚óè = ""
showVarList (‚óè ‚ä± x) = x
showVarList (œá ‚ä± x) = showVarList œá ++ "," ++ x

showExp (i n) = show‚Ñ§ n
showExp (b v) = showùîπ v
showExp (var x) = x
showExp (op prim‚äï e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " + " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äù e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " - " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äõ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " * " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚â∫ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " < " ++ showExp e‚ÇÇ ++ ")"
showExp (if e‚ÇÅ then e‚ÇÇ else e‚ÇÉ) = "if " ++ showExp e‚ÇÅ ++ " then " ++ showExp e‚ÇÇ ++ " else " ++ showExp e‚ÇÉ
showExp (‚Ñìet x ‚âî e‚ÇÅ Œπn e‚ÇÇ) = "let " ++ x ++ " = " ++ showExp e‚ÇÅ ++ " in " ++ showExp e‚ÇÇ
showExp (‚Ñìetrec f ‚âîfun x ‚áí e‚ÇÅ Œπn e‚ÇÇ) = "let rec " ++ f ++ " = fun " ++ x ++ " -> " ++ showExp e‚ÇÅ ++ " in " ++ showExp e‚ÇÇ
showExp (fun x ‚áí e) = "(fun " ++ x ++ " -> " ++ showExp e ++ ")"
showExp (app e‚ÇÅ e‚ÇÇ) = showExp e‚ÇÅ ++ "(" ++ showExp e‚ÇÇ ++ ")"

showDBExp (i n) = show‚Ñ§ n
showDBExp (b v) = showùîπ v
showDBExp (# idx) = "#" ++ show‚Ñï idx
showDBExp (op prim‚äï d‚ÇÅ d‚ÇÇ) = "(" ++ showDBExp d‚ÇÅ ++ " + " ++ showDBExp d‚ÇÇ ++ ")"
showDBExp (op prim‚äù d‚ÇÅ d‚ÇÇ) = "(" ++ showDBExp d‚ÇÅ ++ " - " ++ showDBExp d‚ÇÇ ++ ")"
showDBExp (op prim‚äõ d‚ÇÅ d‚ÇÇ) = "(" ++ showDBExp d‚ÇÅ ++ " * " ++ showDBExp d‚ÇÇ ++ ")"
showDBExp (op prim‚â∫ d‚ÇÅ d‚ÇÇ) = "(" ++ showDBExp d‚ÇÅ ++ " < " ++ showDBExp d‚ÇÇ ++ ")"
showDBExp (if d‚ÇÅ then d‚ÇÇ else d‚ÇÉ) = "if " ++ showDBExp d‚ÇÅ ++ " then " ++ showDBExp d‚ÇÇ ++ " else " ++ showDBExp d‚ÇÉ
showDBExp (‚ÑìetÃ£‚âî d‚ÇÅ Œπn d‚ÇÇ) = "let . = " ++ showDBExp d‚ÇÅ ++ " in " ++ showDBExp d‚ÇÇ
showDBExp (‚ÑìetrecÃ£‚âîfunÃ£‚áí d‚ÇÅ Œπn d‚ÇÇ) = "let rec . = fun . -> " ++ showDBExp d‚ÇÅ ++ " in " ++ showDBExp d‚ÇÇ
showDBExp (funÃ£‚áí d) = "(fun . -> " ++ showDBExp d ++ ")"
showDBExp (app d‚ÇÅ d‚ÇÇ) = showDBExp d‚ÇÅ ++ "(" ++ showDBExp d‚ÇÇ ++ ")"

showJudge‚üæ : ‚àÄ {œá e d} ‚Üí œá ‚ä¢ e ‚üæ d ‚Üí String
showJudge‚üæ TR-Int = "Tr-Int {};"
showJudge‚üæ TR-Bool = "Tr-Bool {};"
showJudge‚üæ (TR-If p‚ÇÅ p‚ÇÇ p‚ÇÉ) = "Tr-If {" ++ showDerivation‚üæ p‚ÇÅ ++ showDerivation‚üæ p‚ÇÇ ++ showDerivation‚üæ p‚ÇÉ ++ "};"
showJudge‚üæ (TR-Plus p‚ÇÅ p‚ÇÇ) = "Tr-Plus {" ++ showDerivation‚üæ p‚ÇÅ ++ showDerivation‚üæ p‚ÇÇ ++ "};"
showJudge‚üæ (TR-Minus p‚ÇÅ p‚ÇÇ) = "Tr-Minus {" ++ showDerivation‚üæ p‚ÇÅ ++ showDerivation‚üæ p‚ÇÇ ++ "};"
showJudge‚üæ (TR-Times p‚ÇÅ p‚ÇÇ) = "Tr-Times {" ++ showDerivation‚üæ p‚ÇÅ ++ showDerivation‚üæ p‚ÇÇ ++ "};"
showJudge‚üæ (TR-Lt p‚ÇÅ p‚ÇÇ) = "Tr-Lt {" ++ showDerivation‚üæ p‚ÇÅ ++ showDerivation‚üæ p‚ÇÇ ++ "};"
showJudge‚üæ (TR-Var1 prf) = "Tr-Var1 {};"
showJudge‚üæ (TR-Var2 prf p) = "Tr-Var2 {" ++ showDerivation‚üæ p ++ "};"
showJudge‚üæ (TR-Let p‚ÇÅ p‚ÇÇ) = "Tr-Let {" ++ showDerivation‚üæ p‚ÇÅ ++ showDerivation‚üæ p‚ÇÇ ++ "};"
showJudge‚üæ (TR-Fun p) = "Tr-Fun {" ++ showDerivation‚üæ p ++ "};"
showJudge‚üæ (TR-App p‚ÇÅ p‚ÇÇ) = "Tr-App {" ++ showDerivation‚üæ p‚ÇÅ ++ showDerivation‚üæ p‚ÇÇ ++ "}"
showJudge‚üæ (TR-LetRec p‚ÇÅ p‚ÇÇ) = "Tr-LetRec {" ++ showDerivation‚üæ p‚ÇÅ ++ showDerivation‚üæ p‚ÇÇ ++ "};"


showDerivation‚üæ {œá} {e} {d} p = showVarList œá ++ " |- " ++ showExp e ++ " ==> " ++ showDBExp d ++ " by " ++ showJudge‚üæ p
