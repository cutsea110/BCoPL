module BCoPL.Show.EvalNamelessML3 where

open import Data.String
open import Data.Nat.Show renaming (show to show‚Ñï)
open import Data.Integer renaming (show to show‚Ñ§)
open import Data.Bool.Show renaming (show to showùîπ)
open import BCoPL.EvalNamelessML3

showDerivation‚áì : ‚àÄ {ŒΩ e d} ‚Üí ŒΩ ‚ä¢ e ‚áì d ‚Üí String
showVarList : VarList ‚Üí String
showExp : Exp ‚Üí String
showDBExp : DBExp ‚Üí String

showVarList ‚óè = ""
showVarList (‚óè ‚ä± x) = x
showVarList (œá ‚ä± x) = showVarList œá ++ "," ++ x

showExp (i n) = show‚Ñ§ n
showExp (b v) = showùîπ v
showExp (var x) = x
showExp (op prim‚äï e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " + " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äù e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " - " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äõ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " * " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚â∫ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " < " ++ showExp e‚ÇÇ ++ ")"
showExp (if e‚ÇÅ then e‚ÇÇ else e‚ÇÉ) = "if " ++ showExp e‚ÇÅ ++ " then " ++ showExp e‚ÇÇ ++ " else " ++ showExp e‚ÇÉ
showExp (‚Ñìet x ‚âî e‚ÇÅ Œπn e‚ÇÇ) = "let " ++ x ++ " = " ++ showExp e‚ÇÅ ++ " in " ++ showExp e‚ÇÇ
showExp (‚Ñìetrec f ‚âîfun x ‚áí e‚ÇÅ Œπn e‚ÇÇ) = "let rec " ++ f ++ " = fun " ++ x ++ " -> " ++ showExp e‚ÇÅ ++ " in " ++ showExp e‚ÇÇ
showExp (fun x ‚áí e) = "(fun " ++ x ++ " -> " ++ showExp e ++ ")"
showExp (app e‚ÇÅ e‚ÇÇ) = showExp e‚ÇÅ ++ "(" ++ showExp e‚ÇÇ ++ ")"

showDBValueList : DBValueList ‚Üí String

showDBValue : DBValue ‚Üí String
showDBValue error = "*** Error occured by illegal DBValue! ***"
showDBValue (i n) = show‚Ñ§ n
showDBValue (b v) = showùîπ v
showDBValue ‚ü® ŒΩ ‚ü©[funÃ£‚áí e ] = "(" ++ showDBValueList ŒΩ ++ ")[fun . -> " ++ showDBExp e ++ "]"
showDBValue ‚ü® ŒΩ ‚ü©[recÃ£‚âîfunÃ£‚áí e ] = "(" ++ showDBValueList ŒΩ ++ ")[rec . = fun . -> " ++ showDBExp e ++ "]"

showDBValueList ‚óè = ""
showDBValueList (‚óè ‚ä± w) = showDBValue w
showDBValueList (ŒΩ ‚ä± w) = showDBValueList ŒΩ ++ "," ++ showDBValue w

showDBExp (i n) = show‚Ñ§ n
showDBExp (b v) = showùîπ v
showDBExp (# idx) = "#" ++ show‚Ñï idx
showDBExp (op prim‚äï d‚ÇÅ d‚ÇÇ) = "(" ++ showDBExp d‚ÇÅ ++ " + " ++ showDBExp d‚ÇÇ ++ ")"
showDBExp (op prim‚äù d‚ÇÅ d‚ÇÇ) = "(" ++ showDBExp d‚ÇÅ ++ " - " ++ showDBExp d‚ÇÇ ++ ")"
showDBExp (op prim‚äõ d‚ÇÅ d‚ÇÇ) = "(" ++ showDBExp d‚ÇÅ ++ " * " ++ showDBExp d‚ÇÇ ++ ")"
showDBExp (op prim‚â∫ d‚ÇÅ d‚ÇÇ) = "(" ++ showDBExp d‚ÇÅ ++ " < " ++ showDBExp d‚ÇÇ ++ ")"
showDBExp (if d‚ÇÅ then d‚ÇÇ else d‚ÇÉ) = "if " ++ showDBExp d‚ÇÅ ++ " then " ++ showDBExp d‚ÇÇ ++ " else " ++ showDBExp d‚ÇÉ
showDBExp (‚ÑìetÃ£‚âî d‚ÇÅ Œπn d‚ÇÇ) = "let . = " ++ showDBExp d‚ÇÅ ++ " in " ++ showDBExp d‚ÇÇ
showDBExp (‚ÑìetrecÃ£‚âîfunÃ£‚áí d‚ÇÅ Œπn d‚ÇÇ) = "let rec . = fun . -> " ++ showDBExp d‚ÇÅ ++ " in " ++ showDBExp d‚ÇÇ
showDBExp (funÃ£‚áí d) = "(fun . -> " ++ showDBExp d ++ ")"
showDBExp (app d‚ÇÅ d‚ÇÇ) = showDBExp d‚ÇÅ ++ "(" ++ showDBExp d‚ÇÇ ++ ")"

showValue : DBValue ‚Üí String
showValue error = "*** Error occured by illegal DBValue ***"
showValue (i n) = show‚Ñ§ n
showValue (b v) = showùîπ v
showValue ‚ü® ŒΩ ‚ü©[funÃ£‚áí e ] = "(" ++ showDBValueList ŒΩ ++ ")[fun . -> " ++ showDBExp e ++ "]"
showValue ‚ü® ŒΩ ‚ü©[recÃ£‚âîfunÃ£‚áí e ] = "(" ++ showDBValueList ŒΩ ++ ")[rec . = fun . -> " ++ showDBExp e ++ "]"

showDerivationPlus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ plus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationPlus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " plus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Plus {};"
showDerivationMinus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ minus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationMinus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " minus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Minus {};"
showDerivationTimes : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ times i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationTimes {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " times " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Times {};"
showDerivationLessThan : ‚àÄ {i‚ÇÅ i‚ÇÇ b} ‚Üí i‚ÇÅ less-than i‚ÇÇ is b ‚Üí String
showDerivationLessThan {i‚ÇÅ} {i‚ÇÇ} {v} p
  = showValue i‚ÇÅ ++ " less than " ++ showValue i‚ÇÇ ++ " is " ++ showValue v ++ " by B-Lt {};"

showJudge‚áì : ‚àÄ {Œµ e v} ‚Üí Œµ ‚ä¢ e ‚áì v ‚Üí String
showJudge‚áì E-Int = "E-Int {};"
showJudge‚áì E-Bool = "E-Bool {};"
showJudge‚áì (E-IfT p‚ÇÅ p‚ÇÇ) = "E-IfT {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ "};"
showJudge‚áì (E-IfF p‚ÇÅ p‚ÇÇ) = "E-IfF {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ "};"
showJudge‚áì (E-Plus p‚ÇÅ p‚ÇÇ x) = "E-Plus {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ showDerivationPlus x ++ "};"
showJudge‚áì (E-Minus p‚ÇÅ p‚ÇÇ x) = "E-Minus {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ showDerivationMinus x ++ "};"
showJudge‚áì (E-Times p‚ÇÅ p‚ÇÇ x) = "E-Times {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ showDerivationTimes x ++ "};"
showJudge‚áì (E-Lt p‚ÇÅ p‚ÇÇ x) = "E-Lt {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ showDerivationLessThan x ++ "};"
showJudge‚áì (E-Var prf) = "E-Var {};"
showJudge‚áì (E-Let p‚ÇÅ p‚ÇÇ) = "E-Let {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ "};"
showJudge‚áì E-Fun = "E-Fun {};"
showJudge‚áì (E-App p‚ÇÅ p‚ÇÇ p‚ÇÉ) = "E-App {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ showDerivation‚áì p‚ÇÉ ++ "};"
showJudge‚áì (E-LetRec p) = "E-LetRec {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-AppRec p‚ÇÅ p‚ÇÇ p‚ÇÉ) = "E-AppRec {" ++ showDerivation‚áì p‚ÇÅ ++ showDerivation‚áì p‚ÇÇ ++ showDerivation‚áì p‚ÇÉ ++ "};"

showDerivation‚áì {ŒΩ} {e} {v} p = showDBValueList ŒΩ ++ " |- " ++ showDBExp e ++ " evalto " ++ showValue v ++ " by " ++ showJudge‚áì p
