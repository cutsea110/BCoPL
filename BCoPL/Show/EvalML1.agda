module BCoPL.Show.EvalML1 where

open import Data.String
open import Data.Nat.Show renaming (show to show‚Ñï)
open import Data.Integer renaming (show to show‚Ñ§)
open import Data.Bool.Show renaming (show to showùîπ)
open import BCoPL.EvalML1

showDerivation‚áì : ‚àÄ {e v} ‚Üí e ‚áì v ‚Üí String
showExp : Exp ‚Üí String

showExp (i n) = show‚Ñ§ n
showExp (b v) = showùîπ v
showExp (e‚ÇÅ ‚äï e‚ÇÇ) = showExp e‚ÇÅ ++ " + " ++ showExp e‚ÇÇ
showExp (e‚ÇÅ ‚äù e‚ÇÇ) = showExp e‚ÇÅ ++ " - " ++ showExp e‚ÇÇ
showExp (e‚ÇÅ ‚äõ e‚ÇÇ) = showExp e‚ÇÅ ++ " * " ++ showExp e‚ÇÇ
showExp (e‚ÇÅ ‚â∫ e‚ÇÇ) = showExp e‚ÇÅ ++ " < " ++ showExp e‚ÇÇ
showExp (if e‚ÇÅ then e‚ÇÇ else e‚ÇÉ) = "if " ++ showExp e‚ÇÅ ++ " then " ++ showExp e‚ÇÇ ++ " else " ++ showExp e‚ÇÉ

showValue : Value ‚Üí String
showValue (i n) = show‚Ñ§ n
showValue (b v) = showùîπ v

showDerivationPlus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ plus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationPlus = {!!}
showDerivationMinus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ minus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationMinus = {!!}
showDerivationTimes : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ times i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationTimes = {!!}
showDerivationLessThan : ‚àÄ {i‚ÇÅ i‚ÇÇ b} ‚Üí i‚ÇÅ less-than i‚ÇÇ is b ‚Üí String
showDerivationLessThan = {!!}

showJudge‚áì : ‚àÄ {e v} ‚Üí e ‚áì v ‚Üí String
showJudge‚áì E-Int = "E-Int {};"
showJudge‚áì E-Bool = "E-Bool {};"
showJudge‚áì (E-IfT e‚ÇÅ e‚ÇÇ) = "E-IfT {" ++ showJudge‚áì e‚ÇÅ ++ showJudge‚áì e‚ÇÇ ++ "};"
showJudge‚áì (E-IfF e‚ÇÅ e‚ÇÇ) = "E-IfF {" ++ showJudge‚áì e‚ÇÅ ++ showJudge‚áì e‚ÇÇ ++ "};"
showJudge‚áì (E-Plus e‚ÇÅ e‚ÇÇ p) = "E-Plus {" ++ showJudge‚áì e‚ÇÅ ++ showJudge‚áì e‚ÇÇ ++ showDerivationPlus p ++ "};"
showJudge‚áì (E-Minus e‚ÇÅ e‚ÇÇ p) = "E-Minus {" ++ showJudge‚áì e‚ÇÅ ++ showJudge‚áì e‚ÇÇ ++ showDerivationMinus p ++ "};"
showJudge‚áì (E-Times e‚ÇÅ e‚ÇÇ p) = "E-Times {" ++ showJudge‚áì e‚ÇÅ ++ showJudge‚áì e‚ÇÇ ++ showDerivationTimes p ++ "};"
showJudge‚áì (E-Lt e‚ÇÅ e‚ÇÇ p) = "E-Lt {" ++ showJudge‚áì e‚ÇÅ ++ showJudge‚áì e‚ÇÇ ++ showDerivationLessThan p ++ "};"

showDerivation‚áì {e} {v} p = showExp e ++ " evalto " ++ showValue v ++ " by " ++ showJudge‚áì p
