module BCoPL.Show.EvalRefML3 where

open import Data.String
open import Data.Nat.Show renaming (show to show‚Ñï)
open import Data.Integer renaming (show to show‚Ñ§)
open import Data.Bool.Show renaming (show to showùîπ)
open import BCoPL.EvalML3

showDerivation‚áì : ‚àÄ {Œµ e v} ‚Üí Œµ ‚ä¢ e ‚áì v ‚Üí String
showEnv : Env ‚Üí String
showExp : Exp ‚Üí String
showValue : Value ‚Üí String

showBinding : BindedValue ‚Üí String
showBinding (x , v) = x ++ " = " ++ showValue v

showEnv ‚óè = ""
showEnv (‚óè ‚ä± x) = showBinding x
showEnv (Œµ ‚ä± x) = showEnv Œµ ++ "," ++ showBinding x

showExp (i n) = show‚Ñ§ n
showExp (b v) = showùîπ v
showExp (var x) = x
showExp (op prim‚äï e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " + " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äù e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " - " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äõ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " * " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚â∫ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " < " ++ showExp e‚ÇÇ ++ ")"
showExp (if e‚ÇÅ then e‚ÇÇ else e‚ÇÉ) = "if " ++ showExp e‚ÇÅ ++ " then " ++ showExp e‚ÇÇ ++ " else " ++ showExp e‚ÇÉ
showExp (‚Ñìet x ‚âî e‚ÇÅ Œπn e‚ÇÇ) = "let " ++ x ++ " = " ++ showExp e‚ÇÅ ++ " in " ++ showExp e‚ÇÇ
showExp (‚Ñìetrec f ‚âîfun x ‚áí e‚ÇÅ Œπn e‚ÇÇ) = "let rec " ++ f ++ " = fun " ++ x ++ " -> " ++ showExp e‚ÇÅ ++ " in " ++ showExp e‚ÇÇ
showExp (fun x ‚áí e) = "(fun " ++ x ++ " -> " ++ showExp e ++ ")"
showExp (app e‚ÇÅ e‚ÇÇ) = showExp e‚ÇÅ ++ "(" ++ showExp e‚ÇÇ ++ ")"

showValue (i n) = show‚Ñ§ n
showValue (b v) = showùîπ v
showValue (‚ü® Œµ ‚ü©[fun x ‚áí e ])
  = "(" ++ showEnv Œµ ++ ")[fun " ++ x ++ " -> " ++ showExp e ++ "]"
showValue (‚ü® Œµ ‚ü©[rec f ‚âîfun x ‚áí e‚ÇÅ ])
  = "(" ++ showEnv Œµ ++ ")[rec " ++ f ++ " = fun " ++ x ++ " -> " ++ showExp e‚ÇÅ ++ "]"

showDerivationPlus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ plus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationPlus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " plus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Plus {};"
showDerivationMinus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ minus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationMinus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " minus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Minus {};"
showDerivationTimes : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ times i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationTimes {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " times " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Times {};"
showDerivationLessThan : ‚àÄ {i‚ÇÅ i‚ÇÇ b} ‚Üí i‚ÇÅ less-than i‚ÇÇ is b ‚Üí String
showDerivationLessThan {i‚ÇÅ} {i‚ÇÇ} {v} p
  = showValue i‚ÇÅ ++ " less than " ++ showValue i‚ÇÇ ++ " is " ++ showValue v ++ " by B-Lt {};"

showJudge‚áì : ‚àÄ {Œµ e v} ‚Üí Œµ ‚ä¢ e ‚áì v ‚Üí String
showJudge‚áì E-Int = "E-Int {};"
showJudge‚áì E-Bool = "E-Bool {};"
showJudge‚áì E-Var1 = "E-Var1 {};"
showJudge‚áì (E-Var2 y‚â¢x e‚ÇÅ) = "E-Var2 {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-IfT e‚ÇÅ e‚ÇÇ) = "E-IfT {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ "};"
showJudge‚áì (E-IfF e‚ÇÅ e‚ÇÇ) = "E-IfF {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ "};"
showJudge‚áì (E-Plus e‚ÇÅ e‚ÇÇ p) = "E-Plus {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivationPlus p ++ "};"
showJudge‚áì (E-Minus e‚ÇÅ e‚ÇÇ p) = "E-Minus {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivationMinus p ++ "};"
showJudge‚áì (E-Times e‚ÇÅ e‚ÇÇ p) = "E-Times {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivationTimes p ++ "};"
showJudge‚áì (E-Lt e‚ÇÅ e‚ÇÇ p) = "E-Lt {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivationLessThan p ++ "};"
showJudge‚áì (E-Let e‚ÇÅ e‚ÇÇ) = "E-Let {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ "};"
showJudge‚áì (E-LetRec e‚ÇÅ) = "E-LetRec {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì E-Fun = "E-Fun {};"
showJudge‚áì (E-App e‚ÇÅ e‚ÇÇ e‚ÇÉ)
  = "E-App {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivation‚áì e‚ÇÉ ++ "};"
showJudge‚áì (E-AppRec e‚ÇÅ e‚ÇÇ e‚ÇÉ)
  = "E-AppRec {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivation‚áì e‚ÇÉ ++ "};"


showDerivation‚áì {Œµ} {e} {v} p = showEnv Œµ ++ " |- " ++ showExp e ++ " evalto " ++ showValue v ++ " by " ++ showJudge‚áì p
