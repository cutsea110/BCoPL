module BCoPL.Show.EvalML1Err where

open import Data.String
open import Data.Nat.Show renaming (show to show‚Ñï)
open import Data.Integer renaming (show to show‚Ñ§)
open import Data.Bool.Show renaming (show to showùîπ)
open import BCoPL.EvalML1Err

showDerivation‚áì : ‚àÄ {e v} ‚Üí e ‚áì v ‚Üí String
showExp : Exp ‚Üí String

showExp (i n) = show‚Ñ§ n
showExp (b v) = showùîπ v
showExp (op prim‚äï e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " + " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äù e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " - " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äõ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " * " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚â∫ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " < " ++ showExp e‚ÇÇ ++ ")"
showExp (if e‚ÇÅ then e‚ÇÇ else e‚ÇÉ) = "if " ++ showExp e‚ÇÅ ++ " then " ++ showExp e‚ÇÇ ++ " else " ++ showExp e‚ÇÉ

showError : Error ‚Üí String
showError Œµ = "error"

showValue : Value ‚Üí String
showValue (right (i n)) = show‚Ñ§ n
showValue (right (b v)) = showùîπ v
showValue (left err) = showError err

showDerivationPlus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ plus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationPlus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " plus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Plus {};"
showDerivationMinus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ minus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationMinus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " minus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Minus {};"
showDerivationTimes : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ times i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationTimes {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " times " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Times {};"
showDerivationLessThan : ‚àÄ {i‚ÇÅ i‚ÇÇ b} ‚Üí i‚ÇÅ less-than i‚ÇÇ is b ‚Üí String
showDerivationLessThan {i‚ÇÅ} {i‚ÇÇ} {v} p
  = showValue i‚ÇÅ ++ " less than " ++ showValue i‚ÇÇ ++ " is " ++ showValue v ++ " by B-Lt {};"

showJudge‚áì : ‚àÄ {e v} ‚Üí e ‚áì v ‚Üí String
showJudge‚áì E-Int = "E-Int {};"
showJudge‚áì E-Bool = "E-Bool {};"
showJudge‚áì (E-IfT e‚ÇÅ e‚ÇÇ) = "E-IfT {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ "};"
showJudge‚áì (E-IfF e‚ÇÅ e‚ÇÇ) = "E-IfF {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ "};"
showJudge‚áì (E-Plus e‚ÇÅ e‚ÇÇ p) = "E-Plus {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivationPlus p ++ "};"
showJudge‚áì (E-Minus e‚ÇÅ e‚ÇÇ p) = "E-Minus {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivationMinus p ++ "};"
showJudge‚áì (E-Times e‚ÇÅ e‚ÇÇ p) = "E-Times {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivationTimes p ++ "};"
showJudge‚áì (E-Lt e‚ÇÅ e‚ÇÇ p) = "E-Lt {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ showDerivationLessThan p ++ "};"

showJudge‚áì (E-IfInt e‚ÇÅ) = "E-IfInt {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-PlusBoolL e‚ÇÅ) = "E-PlusBoolL {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-PlusBoolR e‚ÇÅ) = "E-PlusBoolR {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-MinusBoolL e‚ÇÅ) = "E-MinusBoolL {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-MinusBoolR e‚ÇÅ) = "E-MinusBoolR {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-TimesBoolL e‚ÇÅ) = "E-TimesBoolL {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-TimesBoolR e‚ÇÅ) = "E-TimesBoolR {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-LtBoolL e‚ÇÅ) = "E-LtBoolL {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-LtBoolR e‚ÇÅ) = "E-LtBoolR {" ++ showDerivation‚áì e‚ÇÅ ++ "};"
showJudge‚áì (E-IfError p) = "E-IfError {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-IfTError (e‚ÇÅ , e‚ÇÇ)) = "E-IfTError {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ "};"
showJudge‚áì (E-IfFError (e‚ÇÅ , e‚ÇÇ)) = "E-IfFError {" ++ showDerivation‚áì e‚ÇÅ ++ showDerivation‚áì e‚ÇÇ ++ "};"
showJudge‚áì (E-PlusErrorL p) = "E-PlusErrorL {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-PlusErrorR p) = "E-PlusErrorR {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-MinusErrorL p) = "E-MinusErrorL {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-MinusErrorR p) = "E-MinusErrorR {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-TimesErrorL p) = "E-TimesErrorL {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-TimesErrorR p) = "E-TimesErrorR {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-LtErrorL p) = "E-LtErrorL {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-LtErrorR p) = "E-LtErrorR {" ++ showDerivation‚áì p ++ "};"

showDerivation‚áì {e} {v} p = showExp e ++ " evalto " ++ showValue v ++ " by " ++ showJudge‚áì p
