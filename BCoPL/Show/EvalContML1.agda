module BCoPL.Show.EvalContML1 where

open import Data.String
open import Data.Nat.Show renaming (show to show‚Ñï)
open import Data.Integer renaming (show to show‚Ñ§)
open import Data.Bool.Show renaming (show to showùîπ)
open import BCoPL.EvalContML1

showDerivation‚áì : ‚àÄ {e k v} ‚Üí e ‚â´ k ‚áì v ‚Üí String
showDerivation‚áí : ‚àÄ {v‚ÇÅ k v‚ÇÇ} ‚Üí v‚ÇÅ ‚áí k ‚áì v‚ÇÇ ‚Üí String
showExp : Exp ‚Üí String

showExp (i n) = show‚Ñ§ n
showExp (b v) = showùîπ v
showExp (op prim‚äï e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " + " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äù e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " - " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚äõ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " * " ++ showExp e‚ÇÇ ++ ")"
showExp (op prim‚â∫ e‚ÇÅ e‚ÇÇ) = "(" ++ showExp e‚ÇÅ ++ " < " ++ showExp e‚ÇÇ ++ ")"
showExp (if e‚ÇÅ then e‚ÇÇ else e‚ÇÉ) = "if " ++ showExp e‚ÇÅ ++ " then " ++ showExp e‚ÇÇ ++ " else " ++ showExp e‚ÇÉ

showValue : Value ‚Üí String
showValue (i n) = show‚Ñ§ n
showValue (b v) = showùîπ v

showDerivationPlus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ plus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationPlus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " plus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Plus {};"
showDerivationMinus : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ minus i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationMinus {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " minus " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Minus {};"
showDerivationTimes : ‚àÄ {i‚ÇÅ i‚ÇÇ i‚ÇÉ} ‚Üí i‚ÇÅ times i‚ÇÇ is i‚ÇÉ ‚Üí String
showDerivationTimes {i‚ÇÅ} {i‚ÇÇ} {i‚ÇÉ} p
  = showValue i‚ÇÅ ++ " times " ++ showValue i‚ÇÇ ++ " is " ++ showValue i‚ÇÉ ++ " by B-Times {};"
showDerivationLessThan : ‚àÄ {i‚ÇÅ i‚ÇÇ b} ‚Üí i‚ÇÅ less-than i‚ÇÇ is b ‚Üí String
showDerivationLessThan {i‚ÇÅ} {i‚ÇÇ} {v} p
  = showValue i‚ÇÅ ++ " less than " ++ showValue i‚ÇÇ ++ " is " ++ showValue v ++ " by B-Lt {};"

showPrim : Prim ‚Üí String
showPrim prim‚äï = " + "
showPrim prim‚äù = " - "
showPrim prim‚äõ = " * "
showPrim prim‚â∫ = " < "

showSection : Section ‚Üí String
showSection (‚äó <$ e) = "_ " ++ showPrim ‚äó ++ " " ++ showExp e
showSection (v $> ‚äó) = showValue v ++ " " ++ showPrim ‚äó ++ " _"
showSection (if‚ãÜthen e‚ÇÅ else e‚ÇÇ) = "if _ then " ++ showExp e‚ÇÅ ++ " else " ++ showExp e‚ÇÇ

showCont : Cont ‚Üí String
showCont ‚ãÜ = "_"
showCont (‚ü¶ sop ‚üß‚â´ cont) = "{" ++ showSection sop ++ "} >> " ++ showCont cont

showJudge‚áí : ‚àÄ {v‚ÇÅ v‚ÇÇ k} ‚Üí v‚ÇÅ ‚áí k ‚áì v‚ÇÇ ‚Üí String
showJudge‚áí C-Ret = "C-Ret {};"
showJudge‚áí (C-EvalR d) = "C-EvalR {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-Plus p d) = "C-Plus {" ++ showDerivationPlus p ++ showDerivation‚áí d ++ "};"
showJudge‚áí (C-Minus p d) = "C-Minus {" ++ showDerivationMinus p ++ showDerivation‚áí d ++ "};"
showJudge‚áí (C-Times p d) = "C-Times {" ++ showDerivationTimes p ++ showDerivation‚áí d ++ "};"
showJudge‚áí (C-Lt p d) = "C-Lt {" ++ showDerivationLessThan p ++ showDerivation‚áí d ++ "};"
showJudge‚áí (C-IfT d) = "C-IfT {" ++ showDerivation‚áì d ++ "};"
showJudge‚áí (C-IfF d) = "C-IfF {" ++ showDerivation‚áì d ++ "};"

showJudge‚áì : ‚àÄ {e k v} ‚Üí e ‚â´ k ‚áì v ‚Üí String
showJudge‚áì (E-Int p) = "E-Int {" ++ showDerivation‚áí p ++ "};"
showJudge‚áì (E-Bool p) = "E-Bool {" ++ showDerivation‚áí p ++ "};"
showJudge‚áì (E-BinOp p) = "E-BinOp {" ++ showDerivation‚áì p ++ "};"
showJudge‚áì (E-If p) = "E-If {" ++ showDerivation‚áì p ++ "};"

showDerivation‚áí {v‚ÇÅ} {k} {v‚ÇÇ} p = showValue v‚ÇÅ ++ " => " ++ showCont k ++ " evalto " ++ showValue v‚ÇÇ ++ " by " ++ showJudge‚áí p
showDerivation‚áì {e} {k} {v} p = showExp e ++ " >> " ++ showCont k ++ " evalto " ++ showValue v ++ " by " ++ showJudge‚áì p
